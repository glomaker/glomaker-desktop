<?xml version="1.0" encoding="utf-8"?>

<!--
/////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007-12 LTRI, London Metropolitan Uni. All rights reserved.
// An Open Source Release under the GPL v3 licence  (see http://www.gnu.org/licenses/).
// Authors: Tom Boyle, Nils Millahn, Musbah Sagar, Martin Agombar.
// See http://www.glomaker.org for full details
/////////////////////////////////////////////////////////////////////////
-->

<BaseComponent
	xmlns="org.glomaker.shared.component.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ui="org.glomaker.shared.ui.*"
	xmlns:editbutton="org.glomaker.shared.ui.editbutton.*"
	xmlns:matchingquiz="org.glomaker.plugin.matchingquiz.*"
	layout="absolute"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			
			import org.glomaker.shared.properties.ArrayProperty;
			import org.glomaker.shared.properties.StringProperty;
			
			//--------------------------------------------------
			// Protected vars
			//--------------------------------------------------
			
			// component properties
			protected const list1:ArrayProperty = new ArrayProperty("list1", "", []);
			protected const list2:ArrayProperty = new ArrayProperty("list2", "", []);
			protected const submitLabel:StringProperty = new StringProperty("submit", "", "Submit");
			protected const correctFeedback:StringProperty = new StringProperty("correct", "", "That is correct - well done!");
			protected const wrongFeedback:StringProperty = new StringProperty("wrong", "", "Not quite - try again!");

			// other
			protected var correctAnswers:Array;
			
			protected var feedback:Feedback;
			
			[Bindable]
			protected var editMode:Boolean;
			
			[Bindable]
			protected var list1DP:ArrayCollection = new ArrayCollection();
			
			[Bindable]
			protected var list2DP:ArrayCollection = new ArrayCollection();
			
			//--------------------------------------------------
			// Protected functions
			//--------------------------------------------------
			
			/**
			 * Shuffles the second list and updates the correct answers accordingly.
			 */
			protected function shuffle():void
			{
				var i:uint;
				
				var indices:Array = [];
				for (i=0; i < list2.valueArray.length; i++)
					indices.push(i);
				
				var shuffled:Array = [];
				correctAnswers = new Array(indices.length);
				while (indices.length > 0)
				{
					var r:uint = Math.floor(Math.random() * indices.length);
					i = indices.splice(r, 1)[0];
					
					shuffled.push(list2.valueArray[i]);
					correctAnswers[i] = shuffled.length - 1;
				}
				
				list2DP.source = shuffled;
			}
			
			/**
			 * Sets the items of the second list in the correct order and clears the correct answers as
			 * the unshuffled list is used only in the edit mode where the answers are not needed.
			 */
			protected function unshuffle():void
			{
				correctAnswers = [];
				list2DP.source = list2.valueArray;
			}
			
			protected  function showFeedback(property:StringProperty, title:String = "Enter Feedback"):void
			{
				if(!feedback)
					feedback = new Feedback();
				
				PopUpManager.addPopUp(feedback, this, true);
				PopUpManager.centerPopUp(feedback); 
				
				feedback.relatedProp = property;
				feedback.title = title;
			}

			//--------------------------------------------------
			// Overrides
			//--------------------------------------------------
			
			override protected function defineProperties():void
			{
				super.defineProperties();
				
				addSaveableProperty(list1);
				addSaveableProperty(list2);
				addSaveableProperty(submitLabel);
				addSaveableProperty(correctFeedback);
				addSaveableProperty(wrongFeedback);
			}
			
			override protected function componentInitComplete():void
			{
				super.componentInitComplete();
				
				// lists
				list1DP.source = list1.valueArray;
				shuffle(); //list2
				
				// other
				submitButton.label = submitLabel.propValue;
			}
			
			override public function prepareValuesForSave():void
			{
				super.prepareValuesForSave();
				
				submitLabel.propValue = submitButton.label;
			}
			
			override public function setEditMode(value:Boolean):void
			{
				super.setEditMode(value);
				
				if (value == editMode)
					return;
				
				editMode = value;
				
				if (editMode)
					unshuffle();
				else
					shuffle();
			}
			
			//--------------------------------------------------
			// Event handlers
			//--------------------------------------------------
			
			protected function addButton_clickHandler(event:MouseEvent):void
			{
				list1DP.addItem("");
				list2DP.addItem("");
			}
			
			protected function deleteButton_clickHandler(event:MouseEvent):void
			{
				var index:int = event.target.data;
				if (index >= 0 && index < list1.valueArray.length)
				{
					list1DP.removeItemAt(index);
					list2DP.removeItemAt(index);
				}
			}
			
			protected function correctFeedbackButton_clickHandler(event:MouseEvent):void
			{
				showFeedback(correctFeedback);
			}
			
			protected function wrongFeedbackButton_clickHandler(event:MouseEvent):void
			{
				showFeedback(wrongFeedback);
			}
			
			protected function submitButton_clickHandler(event:MouseEvent):void
			{
			}
		]]>
	</mx:Script>
	
	<mx:Style>
		.correctFeedbackButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/tick.png");
		}
		
		.wrongFeedbackButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/cross.png");
		}
		
		.addButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/add.png");
		}
		
		.deleteButton {
			font-size: 9;
			font-weight: normal;
			skin: Embed("assets/delete.png");
		}
	</mx:Style>

	<mx:UIComponent id="drawCanvas" width="100%" height="100%" />
	
	<mx:VBox width="100%" height="100%">
		<mx:HBox width="100%" height="100%">
			<mx:VBox width="100%" height="100%">
				<mx:Repeater id="list1RP" dataProvider="{list1DP}">
					<matchingquiz:ListItem
						width="100%" height="100%"
						editMode="{editMode}"
						list="{list1DP.source}"
						index="{list1RP.currentIndex}"
						/>
				</mx:Repeater>
			</mx:VBox>
			<mx:Spacer width="60" />
			<mx:VBox width="100%" height="100%">
				<mx:Repeater id="list2RP" dataProvider="{list2DP}">
					<matchingquiz:ListItem
						width="100%" height="100%"
						editMode="{editMode}"
						list="{list2DP.source}"
						index="{list2RP.currentIndex}"
						/>
				</mx:Repeater>
			</mx:VBox>
			<mx:VBox height="100%">
				<mx:Repeater id="deleteRP" dataProvider="{list1DP}">
					<mx:HBox height="100%" verticalAlign="top">
						<mx:Button
							id="deleteButton"
							styleName="deleteButton"
							buttonMode="true"
							data="{deleteRP.currentIndex}"
							visible="{editMode}"
							click="deleteButton_clickHandler(event)"
							/>
					</mx:HBox>
				</mx:Repeater>
			</mx:VBox>
		</mx:HBox>
		<mx:HBox>
			<editbutton:EditableButton
				id="submitButton"
				width="100%" height="100%"
				isEditable="{editMode}"
				click="submitButton_clickHandler(event)"
				/>
			<mx:Button styleName="addButton" visible="{editMode}" click="addButton_clickHandler(event)" />
			<mx:Button styleName="correctFeedbackButton" label="Feedback" visible="{editMode}" click="correctFeedbackButton_clickHandler(event)" />
			<mx:Button styleName="wrongFeedbackButton" label="Feedback" visible="{editMode}" click="wrongFeedbackButton_clickHandler(event)" />
		</mx:HBox>
	</mx:VBox>

</BaseComponent>