<?xml version="1.0" encoding="utf-8"?>

<!--
/////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007-12 LTRI, London Metropolitan Uni. All rights reserved.
// An Open Source Release under the GPL v3 licence  (see http://www.gnu.org/licenses/).
// Authors: Tom Boyle, Nils Millahn, Musbah Sagar, Martin Agombar.
// See http://www.glomaker.org for full details
/////////////////////////////////////////////////////////////////////////
-->

<BaseComponent
	xmlns="org.glomaker.shared.component.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	clipContent="true"
	xmlns:dragdrop="org.glomaker.plugin.dragdrop.*" xmlns:editbutton="org.glomaker.shared.ui.editbutton.*"
>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.glomaker.plugin.dragdrop.events.HotspotDeleteEvent;
			import org.glomaker.plugin.dragdrop.events.HotspotPositionChangeEvent;
			import org.glomaker.plugin.dragdrop.events.HotspotSizeChangeEvent;
			import org.glomaker.plugin.dragdrop.events.HotspotTextChangeEvent;
			import org.glomaker.shared.properties.ArrayProperty;
			import org.glomaker.shared.properties.BooleanProperty;
			import org.glomaker.shared.properties.ColourProperty;
			import org.glomaker.shared.properties.FilePathProperty;
			import org.glomaker.shared.properties.IComponentProperty;
			import org.glomaker.shared.properties.StringProperty;
			
			//--------------------------------------------------
			// Protected vars
			//--------------------------------------------------
			
			// component properties
			protected var encodedRawData:ArrayProperty = new ArrayProperty( "encodedRawData", "", [] ); // stores comma-separate string with x,y,w,h,text properties for each hotspot
			protected var resetLabel:StringProperty = new StringProperty("resetLabel", "", "Reset");
			protected var hotspotColour:ColourProperty = new ColourProperty("hotspotColour", "Hotspot Colour", 0xff0000);
			protected var showHotspots:BooleanProperty = new BooleanProperty("showHotspots", "Show Hotspots?", true);
			protected var imageSource:FilePathProperty = new FilePathProperty("imageSource", "Background Image (optional)" );
			
			// other
			[Bindable]
			protected var editMode:Boolean;
			
			[Bindable]
			protected var listData:ArrayCollection;
			
			// Array of HotspotVO instances describing hotspot data
			protected var hotspotData:Array;
			
			// Dictionary mapping Hotspot display objects to HotspotVO instances dict[:Hotspot] = :HotspotVO
			protected var mapHotspotToVO:Dictionary;
			
			// Dictionary mapping HotspotVO instances to their associated Hotspot display objects dict[:HotspotVO] = :Hotspot
			// reverse of mapHotspotToVO
			protected var mapVOToHotspot:Dictionary;
			
			
			//--------------------------------------------------
			// GLOMaker Component Lifecycle
			//--------------------------------------------------
			
			override protected function defineProperties():void
			{
				addSaveableProperty( encodedRawData );
				addSaveableProperty( resetLabel );
				addProperty( hotspotColour );
				addProperty( showHotspots );
				addProperty( imageSource );
			}
			
			override protected function componentInitComplete():void
			{
				resetButton.label = resetLabel.propValue;
				
				// apply data
				var values:Array;
				hotspotData = new Array();
				for each(var str:String in encodedRawData.propValue )
				{
					values = str.split(",");
					hotspotData.push( new HotspotVO( unescape(values[4]), values[0], values[1], values[2], values[3] ) );
				}

				// initialise data structures
				mapHotspotToVO = new Dictionary(true);
				mapVOToHotspot = new Dictionary(true);
				listData = new ArrayCollection();
				
				// show
				updateList();
				updateHotspotContainerVisibility();
				updateHotspotControlsVisibility();
				updateImageSource();
				displayHotspots();
			}
			
			override public function editablePropertyUpdated(prop:IComponentProperty):void
			{
				super.editablePropertyUpdated(prop);

				// propagate changes
				if( prop == showHotspots )
				{
					
					updateHotspotContainerVisibility();
					
				}else if( prop == hotspotColour ){
					
					updateHotspotColours();
					
				}else if( prop == imageSource ){
					
					updateImageSource();
					
				}
			}
			
			override public function prepareValuesForSave():void
			{
				super.prepareValuesForSave();
				
				resetLabel.propValue = resetButton.label;
				
				// serialise hotspot data
				var asString:Array = [];
				for each( var vo:HotspotVO in hotspotData )
				{
					asString.push( vo.x + "," + vo.y + "," + vo.w + "," + vo.h + "," + escape(vo.text) );
				}
				encodedRawData.propValue = asString;
			}
			
			override public function setEditMode(value:Boolean):void
			{
				super.setEditMode(value);
				
				if (value == editMode)
					return;
				
				editMode = value;
				
				// any dragging should be cleared
				resetDragItems();
				
				// update display (also updates list item alpha values etc)
				updateList();
				updateHotspotContainerVisibility();
				updateHotspotControlsVisibility();
			}
			
			override public function destroy():void
			{
				super.destroy();
			}

			
			// data structure
			// each hotspot:
			// index
			// label
			// hotspot x, y, w, h relative to target region
			// general:
			// array of labels for list (shuffled, non shuffled)
			// image url
			// show/hide hotspots during use
			
			
			//--------------------------------------------------
			// Protected functions
			//--------------------------------------------------
			
			protected function displayHotspots():void
			{
				var hotspot:Hotspot;
				var all:Array = [];
				for each( var vo:HotspotVO in hotspotData )
				{
					hotspot = createHotspotFromVO( vo );
					hotspotContainer.addChild( hotspot );
					all.push( hotspot );
				}
				
				// fade in
				hotspotFadeIn.play( all );
			}
			
			
			/**
			 * Updates the item list.
			 * Shuffles or not, depending on edit mode.
			 * Use this method rather than calling shuffle / unshuffle directly.
			**/
			protected function updateList():void
			{
				editMode ? unshuffle() : shuffle();
			}
			
			/**
			 * Sets the hotspot bg colour.
			**/
			protected function updateHotspotColours():void
			{
				// each hotspot
				var hs:Hotspot;
				for(var i:uint = 0 ; i < hotspotContainer.numChildren ; i++)
				{
					hs = Hotspot(hotspotContainer.getChildAt( i ));
					if( hs )
					{
						hs.bgColour = hotspotColour.propValue;
					}
				}
			}
			
			/**
			 * Updates the source property of the imageContainer to match imageSource.
			**/
			protected function updateImageSource():void
			{
				if( imageSource.propValue == FilePathProperty.NO_URL_VALUE )
				{
					imageContainer.imageSource = null;
					deleteImageButton.enabled = false;
				}else{
					imageContainer.imageSource = imageSource.propValue;
					deleteImageButton.enabled = true;
				}
			}
			
			/**
			 * Sets the hotspot container visibility to match settings and editMode value.
			**/
			protected function updateHotspotContainerVisibility():void
			{
				// generic
				hotspotContainer.visible = ( editMode || showHotspots.propValue );
			}
			
			/**
			 * Updates individual hotspot visibility to match editMode settings
			**/
			protected function updateHotspotControlsVisibility():void
			{
				var hs:Hotspot;
				for(var i:uint = 0;i<hotspotContainer.numChildren;i++)
				{
					hs = Hotspot(hotspotContainer.getChildAt( i ));
					if( hs )
					{
						hs.showControls = editMode;
					}
				}
			}
			
			/**
			 * Shuffles the list of draggable labels.
			 * This is achieved by setting the listData property.
			 */
			protected function shuffle():void
			{
				var raw:Array = [];
				var data:Array = hotspotData.concat(); // quick copy for random extraction
				
				// random loop through hotspot array
				var r:int;
				var vo:HotspotVO;
				
				while( data.length > 0 )
				{
					r = Math.floor( Math.random()*data.length );
					vo = data[r];
					data.splice( r, 1 );
					raw.push( vo );
				}
				
				// update data provider for list
				listData.source = raw;
			}
			
			/**
			 * Sets the list of draggable labels to the order they were created in.
			 * This is achieved by setting the listData property.
			 */
			protected function unshuffle():void
			{
				listData.source = hotspotData.concat();
			}
			
			/**
			 * Creates a Hotspot display object instance for a specified HotspotVO data object.
			**/
			protected function createHotspotFromVO(vo:HotspotVO):Hotspot
			{
				var hotspot:Hotspot = new Hotspot();
				hotspot.labelText = vo.text;
				hotspot.x = vo.x;
				hotspot.y = vo.y;
				hotspot.width = vo.w;
				hotspot.height = vo.h;
				
				// background colour from property
				hotspot.bgColour = hotspotColour.propValue;
				
				// only show controls if in edit mode
				hotspot.showControls = editMode;
				
				// event listeners
				hotspot.addEventListener( HotspotPositionChangeEvent.CHANGE, onHotspotChange, false, 0, true );
				hotspot.addEventListener( HotspotSizeChangeEvent.CHANGE, onHotspotChange, false, 0, true );
				hotspot.addEventListener( HotspotTextChangeEvent.CHANGE, onHotspotChange, false, 0, true );
				hotspot.addEventListener( HotspotDeleteEvent.DELETE, onHotspotDelete, false, 0, true );
				
				// add to display list
				hotspotContainer.addChild( hotspot );
				
				// remember mapping
				mapHotspotToVO[hotspot] = vo;
				mapVOToHotspot[vo] = hotspot;

				// return for further processing
				return hotspot;
			}
			
			/**
			 * Removes hotspot references + data structures for a particular hotspot and calls its 'remove' function.
			**/
			protected function removeHotspot( hotspot:Hotspot ):void
			{
				// event listeners
				hotspot.removeEventListener( HotspotPositionChangeEvent.CHANGE, onHotspotChange );
				hotspot.removeEventListener( HotspotSizeChangeEvent.CHANGE, onHotspotChange );
				hotspot.removeEventListener( HotspotTextChangeEvent.CHANGE, onHotspotChange );
				hotspot.removeEventListener( HotspotDeleteEvent.DELETE, onHotspotDelete );
				
				// data structures
				var vo:HotspotVO = mapHotspotToVO[ hotspot ];
				delete mapHotspotToVO[ hotspot ];
				delete mapVOToHotspot[ vo ];
				
				hotspotData.splice( hotspotData.indexOf( vo ), 1 );
				updateList();
				
				// tell the hotspot to remove itself (will animate etc)
				hotspot.remove();
			}

			
			/**
			 * Create and add a brand new hotspot.
			**/
			protected function addHotspot():void
			{
				// new hotspot data object
				var vo:HotspotVO = new HotspotVO(
					"Click to edit",
					Math.random() * hotspotContainer.width * 4/5,
					Math.random() * hotspotContainer.height * 4/5,
					Math.max( 130, hotspotContainer.width/5 ),
					hotspotContainer.height/5
				);
				
				// add
				hotspotData.push( vo );
				
				// display object
				var hotspot:Hotspot = createHotspotFromVO( vo );
								
				// fade in
				hotspotFadeIn.target = hotspot;
				hotspotFadeIn.play();
				
				// list
				updateList();
			}
			
			protected function deleteImage():void
			{
				imageSource.propValue = FilePathProperty.NO_URL_VALUE;
				imageContainer.imageSource = null;
				deleteImageButton.enabled = false;
			}
			
			/**
			 * Retrieves the list item display object associated with a particular hotspot VO.
			**/
			protected function findListItemForVO( vo:HotspotVO ):DraggableItem
			{
				var item:DraggableItem;
				for(var i:uint = 0;i<dragItemList.numChildren;i++)
				{
					item = DraggableItem( dragItemList.getChildAt( i ) );
					if( item && item.hotspotData == vo )
					{
						break;
					}
					item = null; // to prevent false promises if nothing is found
				}
				
				return item;
			}
			
			/**
			 * Resets all draggable items + placeholders back to their original position.
			**/
			protected function resetDragItems():void
			{
				droppedItemContainer.removeAllChildren();
				
				var item:DraggableItem;
				for(var i:uint = 0;i< dragItemList.numChildren;i++)
				{
					item = DraggableItem(dragItemList.getChildAt(i));
					item.alpha = 1;
					item.mouseEnabled = true;
				}
			}
			
			//--------------------------------------------------
			// Event handlers
			//--------------------------------------------------


			/**
			 * Event handler - Reset button was clicked.
			**/
			protected function onResetClick():void
			{
				// ignore in edit mode - it's an editable button
				if( editMode )
				{
					return;
				}
				resetDragItems();
			}
			
			/**
			 * Event handler - hotspot delete was clicked.
			**/
			protected function onHotspotDelete( e:HotspotDeleteEvent ):void
			{
				removeHotspot( Hotspot(e.target) );
			}
			
			/**
			 * Event handler - hotspot text has changed.
			**/
			protected function onHotspotChange( e:Event ):void
			{
				// update the relevant hotspot data VO
				var hotspot:Hotspot = Hotspot( e.target );
				var vo:HotspotVO = mapHotspotToVO[ hotspot ];
				
				vo.text = hotspot.textLabelComponent.text;
				vo.x = hotspot.x;
				vo.y = hotspot.y;
				vo.w = hotspot.width;
				vo.h = hotspot.height;
				
				// update the corresponding list item
				findListItemForVO( vo ).text = vo.text;
			}
			
			// ------------------------------
			// DRAGGING CODE
			// ------------------------------
			
			protected var sourceItem:DraggableItem;
			protected var draggedItem:DraggableItem;
			protected var targetHotspot:Hotspot;
			protected var dragOffset:Point;
			protected var localSourceCoords:Point;
			
			protected function startItemDrag( e:MouseEvent ):void
			{
				sourceItem = DraggableItem( e.target );
				
				// find the corresponding Hotspot display object (this is the target)
				targetHotspot = mapVOToHotspot[ sourceItem.hotspotData ];

				// create a copy to drag around
				draggedItem = new DraggableItem();
				draggedItem.alpha = 0.6;
				draggedItem.width = sourceItem.width;
				draggedItem.styleName = sourceItem.styleName;
				draggedItem.hotspotData = sourceItem.hotspotData;
				
				// sanity check
				if( sourceItem == null || draggedItem == null || targetHotspot == null )
				{
					throw new Error("Failed to start drag - no valid value found for this hotspot.");
				}
				
				// coordinates need converting
				localSourceCoords = sourceItem.getBounds( this ).topLeft;
				
				draggedItem.x = localSourceCoords.x;
				draggedItem.y = localSourceCoords.y;
				
				// add to display list
				addChild( draggedItem );
				
				// start dragging
				dragOffset = new Point( e.localX, e.localY );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, onDragMove );
				stage.addEventListener( MouseEvent.MOUSE_UP, onDragUp );
			}
			
			protected function onDragMove( e:MouseEvent ):void
			{
				var coords:Point = draggedItem.parent.globalToLocal( new Point( e.stageX, e.stageY ) );
				draggedItem.x = coords.x - dragOffset.x;
				draggedItem.y = coords.y - dragOffset.y;
			}
			
			protected function onDragUp( e:MouseEvent ):void
			{
				// no more events
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, onDragMove );
				stage.removeEventListener( MouseEvent.MOUSE_UP, onDragUp );

				// drop behaviour
				if( targetHotspot && targetHotspot.getBounds( stage ).contains( e.stageX, e.stageY ) )
				{
					// hit - make the draggedItem a persistent copy
					// match position - but in droppedItemContainer coordinate system
					var pt:Point = draggedItem.getBounds( droppedItemContainer ).topLeft;
					draggedItem.x = pt.x;
					draggedItem.y = pt.y;
					
					// move into position over hotspot
					pt = targetHotspot.textLabelComponent.getBounds( droppedItemContainer ).topLeft;
					draggedItem.setStyle("moveEffect", "dropEffect");
					Move(dropEffect.children[0]).xFrom = draggedItem.x;
					Move(dropEffect.children[0]).yFrom = draggedItem.y;
					Fade(dropEffect.children[1]).alphaFrom = draggedItem.alpha;
					draggedItem.move( pt.x, pt.y );
					
					// add to new container's display list
					droppedItemContainer.addChild( draggedItem );

					// the source item is no longer draggable
					sourceItem.alpha = 0.3;
					sourceItem.mouseEnabled = false;
					
					// cleanup
					draggedItem = null;
				
				}else{
					// no hit - return to source
					draggedItem.setStyle( "moveEffect", noDropMove );
					draggedItem.move( localSourceCoords.x, localSourceCoords.y );
				}
				
				// cleanup
				// do not set draggedItem to null since the drop animation might still be playing
				localSourceCoords = null;
				sourceItem = null;
				targetHotspot = null;
				localSourceCoords = null;
			}
			
			protected function onNoDropMoveComplete():void
			{
				if( draggedItem )
				{
					draggedItem.parent.removeChild( draggedItem );
					draggedItem = null;
				}
			}
			
		]]>
	</mx:Script>
	
	<mx:Style>
		.listRegion {
			backgroundColor: #f2f2f2;
			borderColor: #858585;
			borderStyle: solid;
			borderThickness: 1;
			borderSides: "right";
			
		}
		.targetRegion{
			backgroundColor: #f9f9f9;
		}
		
		.itemList {
			paddingBottom: 30;
			paddingLeft: 30;
			paddingTop: 30;
			paddingRight: 30;
		}
		
		.listItem {
			backgroundColor: #bfbfbf;
			color: #000000;
			paddingBottom: 8;
			paddingTop: 8;
			paddingLeft: 8;
			paddingRight: 8;
			fontSize: 16;
			borderStyle: solid;
			borderThickness: 2;
			borderColor: #bfbfbf;
		}
		
		.addButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/add.png");
		}
		
		.removeImageButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/delete.png");
		}
	</mx:Style>
	
	<mx:Fade id="hotspotFadeIn" duration="300" alphaFrom="0.0" alphaTo="1.0" />
	<mx:Move id="noDropMove" duration="300" effectEnd="onNoDropMoveComplete()" />
	
	<mx:Parallel id="dropEffect">
		<mx:Move duration="300"/>
		<mx:Fade duration="300" alphaTo="1.0"/>
	</mx:Parallel>

	<mx:Canvas
		id="listRegionContainer"
		backgroundColor="#f2f2f2"
		width="163"
		height="100%"
		styleName="listRegion"
		horizontalScrollPolicy="off">
		<mx:VBox id="dragItemList" verticalGap="11" width="163" x="0" y="0" styleName="itemList" horizontalScrollPolicy="off">
			<mx:Repeater dataProvider="{listData}" id="dragRep">
				<dragdrop:DraggableItem
					hotspotData="{dragRep.currentItem}"
					styleName="listItem"
					width="95"
					alpha="{editMode?0.3:1.0}"
					buttonMode="true"
					mouseEnabled="{!editMode}"
					mouseDown="startItemDrag(event)"
				/>
			</mx:Repeater>
		</mx:VBox>		
	</mx:Canvas>
	<mx:Canvas
		id="activeRegion"
		width="{width - listRegionContainer.width}"
		height="100%"
		x="{listRegionContainer.width}"
		y="0"
		styleName="targetRegion"
		clipContent="false"
	>
		<dragdrop:ImageHolder
			id="imageContainer"
			width="100%"
			height="100%"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
		/>
		<mx:Canvas
			 id="hotspotContainer"
			 width="100%"
			 height="100%"
			 horizontalScrollPolicy="off"
			 verticalScrollPolicy="off"
			 clipContent="true"
		/>
		<mx:Canvas
			width="100%"
			height="100%"
			visible="{!editMode}"
			id="droppedItemContainer"
			horizontalScrollPolicy="off"
			verticalScrollPolicy="off"
			clipContent="true"
		/>
	</mx:Canvas>
	
	<mx:HBox
		id="editorButtonGroup"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		x="{(listRegionContainer.width - editorButtonGroup.width)/2}"
		y="{resetButton.y - editorButtonGroup.height - 10}">
		<mx:Button id="addButton" click="addHotspot()" visible="{editMode}" label="" styleName="addButton"/>
		<mx:Button id="deleteImageButton" click="deleteImage()" enabled="false" visible="{editMode}" label="No Image" styleName="removeImageButton"/>
	</mx:HBox>
	<editbutton:EditableButton id="resetButton" isEditable="{editMode}" label="Reset" click="onResetClick()" bottom="10" x="{(listRegionContainer.width - resetButton.width)/2}"/>
</BaseComponent>