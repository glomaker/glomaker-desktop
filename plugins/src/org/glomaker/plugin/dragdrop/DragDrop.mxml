<?xml version="1.0" encoding="utf-8"?>

<!--
/////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007-12 LTRI, London Metropolitan Uni. All rights reserved.
// An Open Source Release under the GPL v3 licence  (see http://www.gnu.org/licenses/).
// Authors: Tom Boyle, Nils Millahn, Musbah Sagar, Martin Agombar.
// See http://www.glomaker.org for full details
/////////////////////////////////////////////////////////////////////////
-->

<BaseComponent
	xmlns="org.glomaker.shared.component.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off" xmlns:dragdrop="org.glomaker.plugin.dragdrop.*"
>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.Repeater;
			import mx.managers.PopUpManager;
			
			import org.glomaker.shared.properties.ArrayProperty;
			import org.glomaker.shared.properties.ColourProperty;
			import org.glomaker.shared.properties.IComponentProperty;
			import org.glomaker.shared.properties.NumericStepperProperty;
			import org.glomaker.shared.properties.StringProperty;
			
			//--------------------------------------------------
			// Protected vars
			//--------------------------------------------------
			
			// component properties
			/*
			protected const list1:ArrayProperty = new ArrayProperty("list1", "", ["Item 1","Item 2"]);
			protected const list2:ArrayProperty = new ArrayProperty("list2", "", ["Match 1","Match 2"]);
			protected const submitLabel:StringProperty = new StringProperty("submit", "", "Submit");
			protected const resetLabel:StringProperty = new StringProperty("reset", "", "Reset");
			protected const correctFeedback:StringProperty = new StringProperty("correct", "", "That is correct - well done!");
			protected const wrongFeedback:StringProperty = new StringProperty("wrong", "", "Not quite - try again!");
			protected const connectionColour:ColourProperty = new ColourProperty("connections", "Colour for Connections", 0);
			protected const borderColour:ColourProperty = new ColourProperty("borders", "Colour for Borders of Boxes", 0xB7BABC);
			protected const fontSize:NumericStepperProperty = new NumericStepperProperty("fontSize", "Font Size", 15);
			*/
			
			// other
			[Bindable]
			protected var editMode:Boolean;
			
			[Bindable]
			protected var itemLabels:ArrayCollection;
			
			
			
			public function fakeInit():void
			{
				itemLabels = new ArrayCollection(["Item 1 and much longer text to see what happens", "Item 2", "Item 3"]);
			}
			
			
			
			
			//--------------------------------------------------
			// Protected functions
			//--------------------------------------------------
			
			/**
			 * Shuffles the second list and updates the correct answers accordingly.
			 */
			protected function shuffle():void
			{
			}
			
			/**
			 * Sets the items of the second list in the correct order and clears the correct answers as
			 * the unshuffled list is used only in the edit mode where the answers are not needed.
			 */
			protected function unshuffle():void
			{
			}

			protected var feedback:Feedback;
			protected var result:Result;
			
			protected  function showFeedback(property:StringProperty, title:String = "Enter Feedback"):void
			{
				if(!feedback)
					feedback = new Feedback();
				
				PopUpManager.addPopUp(feedback, this, true);
				PopUpManager.centerPopUp(feedback); 
				
				feedback.relatedProp = property;
				feedback.title = title;
			}
			
			protected  function showResult(correct:Boolean):void
			{
				if(!result)
					result = new Result();
				
				result.correct = correct;
				// result.message = correct ? correctFeedback.propValue : wrongFeedback.propValue;
				
				PopUpManager.addPopUp(result, this, true);
				PopUpManager.centerPopUp(result); 
			}
			
			//--------------------------------------------------
			// Overrides
			//--------------------------------------------------
			
			override protected function defineProperties():void
			{
				//addSaveableProperty(list1);				
				// addProperty(connectionColour);
			}
			
			override protected function componentInitComplete():void
			{
			}
			
			override public function editablePropertyUpdated(prop:IComponentProperty):void
			{
				super.editablePropertyUpdated(prop);
			}
			
			override public function prepareValuesForSave():void
			{
				super.prepareValuesForSave();
			}
			
			override public function setEditMode(value:Boolean):void
			{
				super.setEditMode(value);
				
				if (value == editMode)
					return;
				
				editMode = value;
				
				if (editMode)
					unshuffle();
				else
					shuffle();
			}
			
			//--------------------------------------------------
			// Event handlers
			//--------------------------------------------------
			
			protected function addHotspot():void
			{
				itemLabels.addItem( "Item " + (itemLabels.length + 1) );
				
				// new hotspot
				var hotspot:Hotspot = new Hotspot();
				hotspot.labelText = "Click to Edit";
				hotspot.width = Math.max( 110, targetRegionContainer.width/5 );
				hotspot.height = targetRegionContainer.height/5;
				hotspot.x = Math.random() * targetRegionContainer.width * 4/5;
				hotspot.y = Math.random() * targetRegionContainer.height * 4/5;
				
				// TODO: need to figure out proper sizing
				// and resizing if component is resized!
				targetRegionContainer.addChild( hotspot );
				
				// fade in
				hotspotFadeIn.target = hotspot;
				hotspotFadeIn.play();
			}
			
		]]>
	</mx:Script>
	
	<mx:Style>
		.correctFeedbackButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/tick.png");
		}
		
		.wrongFeedbackButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/cross.png");
		}
		
		.addButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/add.png");
		}
		
		.deleteButton {
			font-size: 9;
			font-weight: normal;
			skin: Embed("assets/delete.png");
		}
		
		.listRegion {
			backgroundColor: #f2f2f2;
			borderColor: #858585;
			borderStyle: solid;
			borderThickness: 1;
			borderSides: "right";
			
		}
		.targetRegion{
			backgroundColor: #f9f9f9;
		}
		
		.itemList {
			paddingBottom: 30;
			paddingLeft: 30;
			paddingTop: 30;
			paddingRight: 30;
		}
		
		.listItem {
			backgroundColor: #bfbfbf;
			color: #000000;
			paddingBottom: 8;
			paddingTop: 8;
			paddingLeft: 8;
			paddingRight: 8;
			fontSize: 16;
			borderStyle: solid;
			borderThickness: 5;
			borderColor: #000000;
		}
		
		.addButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/add.png");
		}
	</mx:Style>
	
	<mx:Fade id="hotspotFadeIn" duration="300" alphaFrom="0.0" alphaTo="1.0" />
	
	<mx:HBox width="100%" height="100%" horizontalGap="0" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:Canvas
			backgroundColor="#f2f2f2"
			width="163"
			height="100%"
			styleName="listRegion">
			<mx:VBox verticalGap="11" width="163" x="0" y="0" styleName="itemList" horizontalScrollPolicy="off">
				<mx:Repeater dataProvider="{itemLabels}" id="dragRep">
					<dragdrop:DraggableItem
						text="{dragRep.currentItem}"
						styleName="listItem"
						width="95"
						alpha="{editMode?0.3:1.0}"
					/>
				</mx:Repeater>
			</mx:VBox>		
		</mx:Canvas>
		<mx:Canvas
			 width="100%"
			 height="100%"
			 x="163"
			 y="0"
			 styleName="targetRegion"
			 id="targetRegionContainer"
		/>
	</mx:HBox>
	
	<mx:Button click="addHotspot()" visible="{editMode}" label="Add New Hotspot" styleName="addButton" />
</BaseComponent>