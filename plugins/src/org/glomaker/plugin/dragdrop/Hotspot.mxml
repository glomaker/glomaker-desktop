<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas
	xmlns:mx="http://www.adobe.com/2006/mxml"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	xmlns:dragdrop="org.glomaker.plugin.dragdrop.*"
	clipContent="false"
	blendMode="layer">

	<mx:Script>
		<![CDATA[
			import org.glomaker.plugin.dragdrop.events.HotspotDeleteEvent;
			import org.glomaker.plugin.dragdrop.events.HotspotTextChangeEvent;

			/**
			 * The text value of the hotspots label.
			**/
			[Bindable]
			public var labelText:String;
			
			[Bindable]
			public var showControls:Boolean = true;
			
			[Bindable]
			public var bgColour:uint = 0xff0000;
			
			/**
			 * Helper variable used during dragging/resize operations.
			**/
			protected var dragOffset:Point;
			
			
			// ---------------
			// PUBLIC METHODS
			// ---------------

			/**
			 * Fades out and, on completion, removes the Hotspot component instance from the display list.
			**/
			public function remove():void
			{
				mouseEnabled = false;
				fadeBeforeRemove.target = this;
				fadeBeforeRemove.play();
			}
			
			// ---------------
			// MOVING CODE
			// ---------------
			protected function moveDown( e:MouseEvent ):void
			{
				// record distance of mouse to top-left corner of the component
				// used to calculate correct new position while dragging
				dragOffset = new Point( e.localX, e.localY );
				
				// move to top of display list so it doesn't underlap other hotspots
				parent.addChild( this );
				
				// start listening to drag events
				stage.addEventListener( MouseEvent.MOUSE_UP, moveStageUp );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, moveStageMove );
			}
			
			protected function moveStageUp( e:MouseEvent ):void
			{
				stage.removeEventListener( MouseEvent.MOUSE_UP, moveStageUp );
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, moveStageMove );
			}
			
			protected function moveStageMove( e:MouseEvent ):void
			{
				// convert to local coordinates
				// note: x, y measured in parent's coordinate system
				var coords:Point = parent.globalToLocal( new Point( e.stageX, e.stageY ) );
				
				// move, keeping mouse at the same location
				// and keeping the entire hotspot within the boundary area
				x = Math.max( 0, Math.min( parent.width - width, coords.x - dragOffset.x ) );
				y = Math.max( 0, Math.min( parent.height - height, coords.y - dragOffset.y ) );
			}
			
			// ---------------
			// RESIZING CODE
			// ---------------
			protected function resizeDown( e:MouseEvent ):void
			{
				// record distance of mouse to edge of the component
				// this will be kept constant while resizing so that the user effectively ends up dragging the corner
				// relies on the fact that resizeCorner is in bottom right corner of component
				dragOffset = new Point( resizeCorner.width - e.localX, resizeCorner.height - e.localY );
				
				// start listening for drag events
				stage.addEventListener( MouseEvent.MOUSE_UP, resizeStageUp );
				stage.addEventListener( MouseEvent.MOUSE_MOVE, resizeStageMove );
			}
			
			protected function resizeStageUp( e:MouseEvent ):void
			{
				stage.removeEventListener( MouseEvent.MOUSE_UP, resizeStageUp );
				stage.removeEventListener( MouseEvent.MOUSE_MOVE, resizeStageMove );
			}
			
			protected function resizeStageMove( e:MouseEvent ):void
			{
				// convert to local coordinates
				var coords:Point = globalToLocal( new Point( e.stageX, e.stageY ) );
				
				// resize - not smaller than the corner elements
				// NB: this is still not ideal as the user can make the element smaller than the enclosed text area and effectively hide the control corners
				// this isn't really something that should happen in normal use though, as the visual feedback makes it obvious that this will occur
				width = Math.max( 2*resizeCorner.width, coords.x + dragOffset.x );
				height = Math.max( 2*resizeCorner.height, coords.y + dragOffset.y);
			}
			
			// ---------------
			// DELETE HANDLER
			// ---------------
			
			protected function deleteClick():void
			{
				dispatchEvent( new HotspotDeleteEvent() );
			}
			
			// ---------------
			// TEXT CHANGE HANDLER
			// ---------------

			protected function textChange():void
			{
				dispatchEvent( new HotspotTextChangeEvent( textLabelComponent.text ) );
			}
			
		]]>
	</mx:Script>
	
	<mx:Style>
		.textAreaStyle {
			backgroundColor: #ffffff;
			color: #000000;
			paddingBottom: 8;
			paddingTop: 8;
			paddingLeft: 8;
			paddingRight: 8;
			fontSize: 16;
			borderStyle: solid;
			borderThickness: 2;
			borderColor: #000000;
		}
	</mx:Style>
	
	<mx:Fade id="fadeBeforeRemove" alphaFrom="1.0" alphaTo="0.0" duration="300" effectEnd="parent.removeChild( this )" />
	
	<mx:Canvas
		width="100%"
		height="100%"
		id="background"
		backgroundColor="{bgColour}"
		alpha="0.2"
		
		mouseEnabled="{showControls}"
		buttonMode="true"
		mouseDown="moveDown(event)"
		/>

	<dragdrop:CornerDelete
		top="0"
		right="0"
		id="deleteCorner"
		visible="{showControls}"
		click="deleteClick()"
	/>
	<dragdrop:CornerResize
		bottom="0"
		right="0"
		id="resizeCorner"
		visible="{showControls}"
		mouseDown="resizeDown(event)"
	/>
	
	<dragdrop:SelfAdjustingTextArea
		id="textLabelComponent"
		visible="{showControls}"
		width="95"
		x="{(width - textLabelComponent.width)/2}"
		y="{(height - textLabelComponent.height)/2}"
		text="{labelText}"
		styleName="textAreaStyle"
		change="textChange()"
	/>
	
	
	
</mx:Canvas>
