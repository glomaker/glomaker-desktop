<?xml version="1.0" encoding="utf-8"?>

<!--
/////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007-12 LTRI, London Metropolitan Uni. All rights reserved.
// An Open Source Release under the GPL v3 licence  (see http://www.gnu.org/licenses/).
// Authors: Tom Boyle, Nils Millahn, Musbah Sagar, Martin Agombar.
// See http://www.glomaker.org for full details
/////////////////////////////////////////////////////////////////////////
-->

<BaseComponent
	xmlns="org.glomaker.shared.component.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	clipContent="true"
	backgroundColor="#f9f9f9"
	xmlns:dragdrop="org.glomaker.plugin.dragdrop.*" xmlns:editbutton="org.glomaker.shared.ui.editbutton.*" xmlns:panorama="org.glomaker.plugin.panorama.*"
>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			
			import org.glomaker.shared.properties.FilePathArrayProperty;
			import org.glomaker.shared.properties.FilePathProperty;
			import org.glomaker.shared.properties.IComponentProperty;
			import org.glomaker.shared.properties.NumberProperty;
			
			//--------------------------------------------------
			// Protected vars
			//--------------------------------------------------
			
			// component properties
			protected var imageSource:FilePathProperty = new FilePathProperty("imageSource", "Choose an image:" ); // internal use only, not persisted
			protected var images:FilePathArrayProperty = new FilePathArrayProperty("images");
			
			// other
			[Bindable]
			protected var imageListData:ArrayCollection; // image 0 is pointing north
			
			[Bindable]
			protected var editMode:Boolean;
			
			[Bindable]
			protected var selectedImageSource:String;

			/**
			 * Index into imageListData of the image that the user has clicked on.
			 * Holds the value -1 when no image is selected.
			**/
			protected var selectedIndex:int = -1;
			
			
			//--------------------------------------------------
			// GLOMaker Component Lifecycle
			//--------------------------------------------------
			
			override protected function defineProperties():void
			{
				addSaveableProperty( images );
			}
			
			override protected function componentInitComplete():void
			{
				// data structures
				imageListData = new ArrayCollection( images.propValue );
			}
			
			override public function editablePropertyUpdated(prop:IComponentProperty):void
			{
				super.editablePropertyUpdated(prop);
				
				if( prop == imageSource )
				{
					// this happens if the user is adding an image or changing an existing image
					// we can determine which by checking if selectedIndex is pointing to a valid value
					if( selectedIndex == -1 )
					{
						// adding a new image
						var newIndex:uint = imageListData.length;
						imageListData.addItem( prop.propValue );
						
						// the 'add image' dialog is still open
						closeImageAdd();
					}else{
						// currently viewing an existing image
						// simply update the data model and the image shown
						selectedImageSource = prop.propValue;
						imageListData.setItemAt( prop.propValue, selectedIndex );
					}
				}
			}
			
			override public function prepareValuesForSave():void
			{
				super.prepareValuesForSave();
				images.propValue = imageListData.source.concat();
			}
			
			override public function setEditMode(value:Boolean):void
			{
				super.setEditMode(value);
				
				if (value == editMode)
					return;
				
				editMode = value;
			}
			
			override public function destroy():void
			{
				super.destroy();
			}

			
			//--------------------------------------------------
			// Protected functions
			//--------------------------------------------------
			
			protected function add():void
			{
				showAddImage();
			}
			
			protected function select( e:MouseEvent ):void
			{
				showImagePanel( Thumbnail( e.currentTarget ).listIndex );
			}
			
			protected function remove():void
			{
				if( selectedIndex == -1 )
					return;
				
				// remove from data model and deselect
				imageListData.removeItemAt( selectedIndex );
				selectedIndex = -1;
				
				// triggered from a button on the image panel
				closeImagePanel();
				
				// todo - update the 'north' pointer
			}
			
			protected function setNorth():void
			{
				if( selectedIndex == -1 )
					return;
				
				// the 'north' image is always at the beginning of the array
				// we reorganise accordingly
				var newList:Array = imageListData.source.slice( selectedIndex ).concat( imageListData.source.slice( 0, selectedIndex ) );
				imageListData.source = newList;
				
				// close the popup
				closeImagePanel();
			}
			
			protected function showAddImage():void
			{
				selectedIndex = -1;
				updateEditableProperties([imageSource]);

				imagePanel.visible = false;
				modalOverlay.visible = true;
				addImageDialog.visible = true;
			}
			
			protected function showImagePanel( index:int ):void
			{
				selectedIndex = index;
				updateEditableProperties([imageSource]);

				if( selectedIndex != -1 )
				{
					selectedImageSource = String(imageListData.getItemAt( selectedIndex ));
				}

				setNorthButton.enabled = (selectedIndex > 0); // because image 0 is already north
				
				addImageDialog.visible = false;
				imagePanel.visible = true;
				modalOverlay.visible = true;
			}
			
			protected function closeImagePanel():void
			{
				modalOverlay.visible = false;
				imagePanel.visible = false;
				selectedIndex = -1;
				updateEditableProperties([]);
			}
			
			protected function closeImageAdd():void
			{
				modalOverlay.visible = false;
				addImageDialog.visible = false;
				selectedIndex = -1;
				updateEditableProperties([]);
			}
			
			
		]]>
	</mx:Script>
	
	<mx:Style>
		.imageContainer{
			backgroundColor: #004890;
		}
		
		.thumbnailBox
		{
			paddingTop: 10;
			paddingBottom: 26;
			paddingLeft: 10;
			paddingRight: 10;
		}
		.popup {
			backgroundColor: #ffffff;
			borderColor: #004890;
			borderThickness: 1;
			borderStyle: solid;
			paddingLeft: 10;
			paddingRight: 10;
			paddingTop: 10;
			paddingBottom: 10;
		}
		.modalOverlay {
			backgroundColor: #000000;
		}
		.addButton {
			font-size: 9;
			font-weight: normal;
			icon: Embed("assets/add.png");
		}
		.thumbnail
		{
			backgroundColor: #ffffff;
		}
	</mx:Style>
	
	<mx:Fade id="fadeIn" duration="300" alphaFrom="0.0" alphaTo="1.0" />
	
	<mx:Glow id="glowThumb" duration="100"
			 alphaFrom="0" alphaTo="0.8"
			 blurXFrom="0.0" blurXTo="15.0" 
			 blurYFrom="0.0" blurYTo="15.0"  strength="1"
			 color="0xffffff"/>
	
	<mx:Glow id="unglowThumb" duration="100"  
			 alphaFrom="0.8" alphaTo="0"
			 blurXFrom="15.0" blurXTo="0.0"
			 blurYFrom="15.0" blurYTo="0.0"  strength="1"
			 color="0xffffff"/>
		
	<mx:Canvas
		id="imageContainer"
		styleName="imageContainer"
		height="50%"
		width="100%"
		verticalCenter="0"
		verticalScrollPolicy="off"
	>
		<mx:HBox height="100%" styleName="thumbnailBox" horizontalCenter="0">
			<mx:Repeater dataProvider="{imageListData}" id="imgRp">
				<panorama:Thumbnail
					source="{imgRp.currentItem}"
					styleName="thumbnail"
					listIndex="{imgRp.currentIndex}"
					degrees="{Math.round(imgRp.currentIndex*360/imageListData.length) + 'Â°'}"
					height="100%"
					width="100"
					buttonMode="true"
					click="select(event)"
					rollOverEffect="{glowThumb}"
					rollOutEffect="{unglowThumb}"
				/>
			</mx:Repeater>
		</mx:HBox>
	</mx:Canvas>
	
	<mx:Button id="addButton" click="add()" showEffect="{fadeIn}" visible="{editMode}" label="Add Panorama Image" styleName="addButton" bottom="10" horizontalCenter="0" />
	
	<mx:Canvas
		visible="false"
		id="modalOverlay"
		styleName="modalOverlay"
		alpha="0.4"
		width="100%"
		height="100%"
		/>
	
	<mx:VBox
		visible="false"
		id="imagePanel"
		styleName="popup"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		width="85%"
		height="85%"
		verticalCenter="0"
		horizontalCenter="0"
		horizontalAlign="center"
		showEffect="{fadeIn}"
	>
		<mx:Image
			width="100%"
			height="100%"
			verticalAlign="middle"
			horizontalAlign="center"
			source="{selectedImageSource}"/>
		<mx:HBox>
			<mx:Button id="setNorthButton" click="setNorth()" label="Set as North" visible="{editMode}" includeInLayout="{editMode}" />
			<mx:Button click="remove()" label="Remove Image" visible="{editMode}" includeInLayout="{editMode}" />
			<mx:Spacer width="20" visible="{editMode}" includeInLayout="{editMode}" />
			<mx:Button click="closeImagePanel()" label="Close" />
		</mx:HBox>
		<mx:Label fontWeight="bold" text="Use the properties panel to change the image" visible="{editMode}" includeInLayout="{editMode}"/>
	</mx:VBox>

	<mx:VBox
		visible="false"
		id="addImageDialog"
		styleName="popup"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		verticalCenter="0"
		horizontalCenter="0"
		horizontalAlign="center"
		showEffect="{fadeIn}"
	>
		<mx:Label text="Add an image" fontWeight="bold"/>
		<mx:Label text="Use the Browse button in the properties panel below to choose an image"/>
		<mx:Button label="Cancel" click="closeImageAdd()"/>
	</mx:VBox>
	
</BaseComponent>