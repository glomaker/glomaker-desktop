<?xml version="1.0" encoding="utf-8"?>

<!--
/////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007-12 LTRI, London Metropolitan Uni. All rights reserved.
// An Open Source Release under the GPL v3 licence  (see http://www.gnu.org/licenses/).
// Authors: Tom Boyle, Nils Millahn, Musbah Sagar, Martin Agombar.
// See http://www.glomaker.org for full details
/////////////////////////////////////////////////////////////////////////
-->

<BaseComponent
	xmlns="org.glomaker.shared.component.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:editbutton="org.glomaker.shared.ui.editbutton.*"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	addedToStage="addedToStageHandler(event)"
	>
	
	<mx:Script>
		<![CDATA[
			import org.glomaker.shared.properties.BooleanProperty;
			import org.glomaker.shared.properties.ColourProperty;
			import org.glomaker.shared.properties.IComponentProperty;
			import org.glomaker.shared.properties.NumericStepperProperty;
			import org.glomaker.shared.properties.RichTextProperty;
			import org.glomaker.shared.properties.StringProperty;
			
			//--------------------------------------------------
			// Protected vars
			//--------------------------------------------------
			
			// state names (must match state names in MXML)
			protected static const ACTIVE_STATE:String = "activated";
			protected static const CLOSED_STATE:String = "default";
			
			
			// component properties
			protected var buttonLabel:StringProperty = new StringProperty("label", "Label", "Pop-up Info");
			protected var text:RichTextProperty = new RichTextProperty("text", "Text", "Enter your Popup text. You can style your text using the main text toolbar.");
			
			protected var showTextBGProp:BooleanProperty = new BooleanProperty("showTextBG", "Show Text BG", true);
			protected var textBGColourProp:ColourProperty = new ColourProperty("textBGColour", "Text BG Colour", 0x006600);
			protected var textBGAlphaProp:NumericStepperProperty = new NumericStepperProperty("textBGAlpha", "Text BG Transparency", 50);
			
			//other
			[Bindable]
			protected var inEditor:Boolean = false;
			
			//--------------------------------------------------
			// Overrides
			//--------------------------------------------------

			override protected function defineProperties():void
			{
				super.defineProperties();
				
				textBGAlphaProp.minimum = 0;
				textBGAlphaProp.maximum = 100;
				
				text.textArea = textArea;
				
				addSaveableProperty(buttonLabel);
				addSaveableProperty(text);
				addSaveableProperty(showTextBGProp);
				addSaveableProperty(textBGColourProp);
				addSaveableProperty(textBGAlphaProp);
				
				addEditableProperty(showTextBGProp);
				addEditableProperty(textBGColourProp);
				addEditableProperty(textBGAlphaProp);
			}
			
			override protected function componentInitComplete():void
			{
				super.componentInitComplete();
				
				button.label = buttonLabel.propValue;
				textArea.htmlText = text.propValue;
				updateWrapper();
			}
			
			override public function prepareValuesForSave():void
			{
				super.prepareValuesForSave();
				
				buttonLabel.propValue = button.label;
				text.propValue = textArea.htmlText; 
			}
			
			override public function setEditMode(value:Boolean):void
			{
				super.setEditMode(value);
				
				button.isEditable = value;
				textArea.editable = value;
				textArea.selectable = value;
				
				// deselect text if switching out of edit mode
				if (!value)
					textArea.selectionBeginIndex = textArea.selectionEndIndex = 0;
			}
			
			override public function editablePropertyUpdated(prop:IComponentProperty):void
			{
				updateWrapper();
			}
			

			/**
			 * Updates background / transparency of background wrapper canvas to match component settings.
			**/
			protected function updateWrapper():void
			{
				// reset (certain scenarios disable mouse events)
				bgWrapper.mouseEnabled = true;
				
				// show/hide the background colour itself
				if( showTextBGProp.propValue == true && (inEditor || currentState == ACTIVE_STATE ))
				{
					bgWrapper.setStyle( "backgroundAlpha", textBGAlphaProp.propValue/100 );
					bgWrapper.setStyle( "backgroundColor", textBGColourProp.propValue );
				}else{
					bgWrapper.setStyle( "backgroundAlpha", 0 );
					
					if( !inEditor )
					{
						// make sure an invisible background doesn't mask other active elements
						bgWrapper.mouseEnabled = false;
					}
				}
				
				// and update the editing panel accordingly
				// colour and alpha only required if the bg is visible
				if( showTextBGProp.propValue )
				{
					updateEditableProperties( [showTextBGProp, textBGColourProp, textBGAlphaProp] );
				}else{
					updateEditableProperties( [showTextBGProp] );
				}
			}
			
			//--------------------------------------------------
			// Event handlers
			//--------------------------------------------------
			
			protected function addedToStageHandler(event:Event):void
			{
				var value:Boolean = false;
				var p:DisplayObjectContainer = parent;
				
				while (p)
				{
					if (/GloDrawingView$/.test(getQualifiedClassName(p)))
					{
						value = true;
						break;
					}
					
					p = p.parent;
				}
				
				inEditor = value;
			}
			
			protected function button_clickHandler(event:MouseEvent):void
			{
				if (inEditor)
					return;
				
				// toggle state
				// note that initially, currentState is probably null, rather than "default"
				// this case is handled correctly by writing the if-statement as below
				if( currentState == ACTIVE_STATE)
				{
					currentState = CLOSED_STATE;	
				}else{
					currentState = ACTIVE_STATE;
				}
				
				// make sure background behaves
				updateWrapper();
				
			}
		]]>
	</mx:Script>
	
	<states>
		<mx:State name="default" />
		<mx:State name="activated">
			<mx:SetStyle target="{button}" name="icon" value="@Embed('assets/activated.png')" />
			<mx:SetProperty target="{textWrapper}" name="visible" value="{true}" />
		</mx:State>
	</states>
	
	<mx:Canvas id="bgWrapper" width="100%" height="100%">
	
		<mx:VBox width="100%" height="100%" horizontalAlign="center" paddingTop="5" paddingLeft="5" paddingRight="5" paddingBottom="5">
			<editbutton:EditableButton id="button" buttonMode="true" fontSize="15" icon="@Embed('assets/default.png')" click="button_clickHandler(event)" />
			<!-- Use a canvas for drawing the border around the text area because changing its border discards the html formatting -->
			<mx:Canvas id="textWrapper" width="100%" height="100%" visible="{inEditor}" borderStyle="{inEditor ? 'solid' : 'none'}" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:TextArea id="textArea" width="100%" height="100%" fontSize="15" editable="false" selectable="false" backgroundAlpha="0" borderStyle="none" horizontalScrollPolicy="off" verticalScrollPolicy="off" />
			</mx:Canvas>
		</mx:VBox>
		
	</mx:Canvas>
	
</BaseComponent>