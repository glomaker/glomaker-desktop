<?xml version="1.0" encoding="utf-8"?>

<!--
/////////////////////////////////////////////////////////////////////////
// Copyright (c) 2007-12 LTRI, London Metropolitan Uni. All rights reserved.
// An Open Source Release under the GPL v3 licence  (see http://www.gnu.org/licenses/).
// Authors: Tom Boyle, Nils Millahn, Musbah Sagar, Martin Agombar.
// See http://www.glomaker.org for full details
/////////////////////////////////////////////////////////////////////////
-->

<BaseComponent
	xmlns="org.glomaker.shared.component.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:editbutton="org.glomaker.shared.ui.editbutton.*"
	horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	addedToStage="addedToStageHandler(event)"
	>
	
	<mx:Script>
		<![CDATA[
			import org.glomaker.shared.properties.RichTextProperty;
			import org.glomaker.shared.properties.StringProperty;
			
			//--------------------------------------------------
			// Protected vars
			//--------------------------------------------------
			
			// component properties
			protected var buttonLabel:StringProperty = new StringProperty("label", "Label", "Button Label");
			protected var text:RichTextProperty = new RichTextProperty("text", "Text", "");
			
			//other
			[Bindable]
			protected var inEditor:Boolean = false;
			
			//--------------------------------------------------
			// Overrides
			//--------------------------------------------------
			
			override protected function defineProperties():void
			{
				super.defineProperties();
				
				text.textArea = textArea;
				
				addSaveableProperty(buttonLabel);
				addSaveableProperty(text);
			}
			
			override protected function componentInitComplete():void
			{
				super.componentInitComplete();
				
				button.label = buttonLabel.propValue;
				textArea.htmlText = text.propValue;
			}
			
			override public function prepareValuesForSave():void
			{
				super.prepareValuesForSave();
				
				buttonLabel.propValue = button.label;
				text.propValue = textArea.htmlText; 
			}
			
			override public function setEditMode(value:Boolean):void
			{
				super.setEditMode(value);
				
				button.isEditable = value;
				textArea.editable = value;
				
				// deselect text if switching out of edit mode
				if (!value)
					textArea.selectionBeginIndex = textArea.selectionEndIndex = 0;
			}
			
			//--------------------------------------------------
			// Event handlers
			//--------------------------------------------------
			
			protected function addedToStageHandler(event:Event):void
			{
				var value:Boolean = false;
				var p:DisplayObjectContainer = parent;
				
				while (p)
				{
					if (/GloDrawingView$/.test(getQualifiedClassName(p)))
					{
						value = true;
						break;
					}
					
					p = p.parent;
				}
				
				inEditor = value;
			}
			
			protected function button_clickHandler(event:MouseEvent):void
			{
				if (inEditor)
					return;
				
				currentState = 'activated';
			}
		]]>
	</mx:Script>
	
	<states>
		<mx:State name="default" />
		<mx:State name="activated">
			<mx:SetStyle target="{button}" name="icon" value="@Embed('assets/activated.png')" />
			<mx:SetProperty target="{textWrapper}" name="visible" value="{true}" />
		</mx:State>
	</states>
	
	<mx:VBox width="100%" height="100%" horizontalAlign="center">
		<editbutton:EditableButton id="button" icon="@Embed('assets/default.png')" click="button_clickHandler(event)" />
		<!-- Use a canvas for drawing the border around the text area because changing its border discards the html formatting -->
		<mx:Canvas id="textWrapper" width="100%" height="100%" visible="{inEditor}" borderStyle="{inEditor ? 'solid' : 'none'}" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:TextArea id="textArea" width="100%" height="100%" editable="false" backgroundAlpha="0" borderStyle="none" horizontalScrollPolicy="off" verticalScrollPolicy="off" />
		</mx:Canvas>
	</mx:VBox>
	
</BaseComponent>